---
title: "Strings"
number-sections: true
execute: 
  warning: false
fig-env: 'figure'
fig-pos: 'h'
fig-align: center
code-fold: false
---



::: {.callout-caution title="Learning Goals"}
-   Learn some fundamentals of working with strings of text data.
-   Learn functions to search and replace, detect patterns, locate patterns, extract patterns, and separate text with the `stringr` package.
:::

::: {.callout-note title="Additional Resources"}
For more information about the topics covered in this chapter, refer to the resources below:

-   [Working with strings (YouTube)](https://www.youtube.com/watch?v=__pJ_u94LZg&t=52s) by Lisa Lendway
-   [strings cheat sheet (pdf)](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf)
-   [Strings (html)](https://r4ds.hadley.nz/strings.html) by Wickham, Ã‡etinkaya-Rundel, & Grolemund
-   [Regular expressions (html)](https://mdsr-book.github.io/mdsr2e/ch-text.html#regular-expressions-using-macbeth) by Baumer, Kaplan, and Horton
-   [RegExplain RStudio addin tool (html)](https://www.garrickadenbuie.com/project/regexplain/) (Garrick Aden-Buie)
-   [regexr exploration tool (html)](https://regexr.com/)
:::


## Warm-up

**WHERE ARE WE?**

We're in the *last day* of our "data preparation" unit:

![](https://mac-stat.github.io/images/112/legos.png)

Before spring break, we started discussing some considerations in working with special types of "categorical" variables: *characters* and *factors*.

1.  **Converting characters to factors (and factors to meaningful factors)** (last time)\
    When categorical information is stored as a *character* variable, the categories of interest might not be labeled or ordered in a meaningful way. We can fix that!

2.  **Strings** (today!)\
    When working with character strings, we might want to detect, replace, or extract certain *patterns*. For example, recall our data on `courses`:

```{r echo = FALSE}
courses_old <- read.csv("https://mac-stat.github.io/data/courses.csv")
    
# Check out the data
head(courses_old)
    
# Check out the structure of each variable
# Many of these are characters!
str(courses_old)
```

Focusing on just the `sem` character variable, we might want to...

```         
- change `FA` to `fall_` and `SP` to `spring_`
- keep only courses taught in fall
- split the variable into 2 new variables: `semester` (`FA` or `SP`) and `year`
```

3.  Much more! (maybe in your projects or COMP/STAT 212)\
    There are a lot of ways to process character variables. For example, we might have a variable that records the text for a sample of news articles. We might want to analyze things like the articles' *sentiments*, word counts, typical word lengths, most common words, etc.

\
\
\
\

**ESSENTIAL STRING FUNCTIONS**

The `stringr` package within `tidyverse` contains lots of functions to help process strings. We'll focus on the most common. Letting `x` be a string variable...

| function            | arguments                 | returns           |
|:--------------------|:--------------------------|:------------------|
| `str_replace()`     | `x, pattern, replacement` | a modified string |
| `str_replace_all()` | `x, pattern, replacement` | a modified string |
| `str_to_lower()`    | `x`                       | a modified string |
| `str_sub()`         | `x, start, end`           | a modified string |
| `str_length()`      | `x`                       | a number          |
| `str_detect()`      | `x, pattern`              | TRUE/FALSE        |

\
\
\
\

**EXAMPLE 1**

Consider the following data with string variables :

```{r}
library(tidyverse)

classes <- data.frame(
  sem        = c("SP2023", "FA2023", "SP2024"),
  area       = c("History", "Math", "Anthro"),
  enroll     = c("30 - people", "20 - people", "25 - people"),
  instructor = c("Ernesto Capello", "Lori Ziegelmeier", "Arjun Guneratne")
)

classes
```

Using only your intuition, use our `str_` functions to complete the following. NOTE: You might be able to use other wrangling verbs in some cases, but focus on the new functions here.

```{r}
# Define a new variable "num" that adds up the number of characters in the area label
classes |> 
  mutate(num = str_length(area))

```

```{r}
# Change the areas to "history", "math", "anthro" instead of "History", "Math", "Anthro"
classes |> 
  mutate(area = str_to_lower(area))

```

```{r}
# Create a variable that id's which courses were taught in spring
classes |> 
  mutate(spring = str_detect(sem, "SP"))

```

```{r}
# Change the semester labels to "fall2023", "spring2024", "spring2023"
classes |> 
  mutate(sem = str_replace(sem, "SP", "spring")) |> 
  mutate(sem = str_replace(sem, "FA", "fall"))  
```

```{r}
# In the enroll variable, change all e's to 3's (just because?)
classes |> 
  mutate(enroll = str_replace_all(enroll, "e", "3"))
```

```{r}
# Use sem to create 2 new variables, one with only the semester (SP/FA) and 1 with the year
classes |> 
  mutate(semester = str_sub(sem, 1, 2),
         year = str_sub(sem, 3, 6))
```

\
\
\
\

**SUMMARY**

Here's what we learned about each function:

-   `str_replace(x, pattern, replacement)` finds the *first* part of `x` that matches the `pattern` and replaces it with `replacement`

-   `str_replace_all(x, pattern, replacement)` finds *all* instances in `x` that matches the `pattern` and replaces it with `replacement`

-   `str_to_lower(x)` converts all upper case letters in `x` to lower case

-   `str_sub(x, start, end)` only keeps a subset of characters in `x`, from `start` (a number indexing the first letter to keep) to `end` (a number indexing the last letter to keep)

-   `str_length(x)` records the number of characters in `x`

-   `str_detect(x, pattern)` is TRUE if `x` contains the given `pattern` and FALSE otherwise

\
\
\
\

**EXAMPLE 2**

Suppose we *only* want the spring courses:

```{r}
# How can we do this after mutating?
classes |> 
  mutate(spring = str_detect(sem, "SP"))
```

```{r}
# We don't have to mutate first!
classes |> 
  filter(str_detect(sem, "SP"))
```

```{r}
# Yet another way
classes |> 
  filter(!str_detect(sem, "FA"))
```

\
\
\
\

**EXAMPLE 3**

Suppose we wanted to get separate columns for the first and last names of each course instructor in `classes`. Try doing this using `str_sub()`. But don't try too long! Explain what trouble you ran into.

\
\
\
\

**EXAMPLE 4**

In general, when we want to split a column into 2+ new columns, we can often use `separate()`:

```{r}
classes |> 
  separate(instructor, c("first", "last"), sep = " ")
```

```{r}
# Sometimes the function can "intuit" how we want to separate the variable
classes |> 
  separate(instructor, c("first", "last"))
```

a.  Separate enroll into 2 separate columns: `students` and `people`. (These columns don't make sense this is just practice).

```{r}
 classes |> 
   separate(enroll, c("students", "people"), sep = "enroll")
```

b.  We separated `sem` into semester and year above using `str_sub()`. Why would this be hard using `separate()`?

Because part of it is categorical, and the other is numerical. 

c.  When we want to split a column into 2+ new columns (or do other types of string processing), but there's no consistent pattern by which to do this, we can use *regular expressions* (an optional topic):

```{r}
# (?<=[SP|FA]): any character *before* the split point is a "SP" or "FA"
# (?=2): the first character *after* the split point is a 2
classes |> 
  separate(sem, 
          c("semester", "year"),
          "(?<=[SP|FA])(?=2)")
```

```{r}
# More general:
# (?<=[a-zA-Z]): any character *before* the split point is a lower or upper case letter
# (?=[0-9]): the first character *after* the split point is number
classes |> 
  separate(sem, 
          c("semester", "year"),
          "(?<=[A-Z])(?=[0-9])")
```

\
\
\
\
