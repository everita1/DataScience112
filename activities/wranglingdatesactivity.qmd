---
title: "Wrangling + Dates"
number-sections: true
execute: 
  warning: false
fig-env: 'figure'
fig-pos: 'h'
fig-align: center
code-fold: false
---

::: {.callout-caution title="Learning Goals"}
-   Review wrangling verbs `select`, `mutate`, `filter`, `arrange`, `summarize`, `group_by`
-   Form conceptual understanding of code without running it
-   Practice using wrangling verbs in different way
-   Practice dealing with dates using `lubridate` functions
:::

::: {.callout-note title="Additional Resources"}
For more information about the topics covered in this chapter, refer to the resources below:

-   [Date and Times (html)](https://r4ds.hadley.nz/datetimes) by Wickham, Ã‡etinkaya-Rundel, & Grolemund
:::

{{< include activity-instructions.qmd >}}

## Warm-up

### Data Science Process {.unnumbered}

Below is the visual representation of the data science process we saw earlier. Which stage are we in currently?

![](https://mac-stat.github.io/images/112/legos.png)

Recall that wrangling is important. It is much of what we spend our efforts on in Data Science. There are lots of steps, hence R functions, that can go into data wrangling. But we can get far with the following 6 *wrangling verbs*:

| verb        | action                                            |
|:------------|:--------------------------------------------------|
| `arrange`   | **arrange** the *rows* according to some *column* |
| `filter`    | **filter** out or obtain a subset of the *rows*   |
| `select`    | **select** a subset of *columns*                  |
| `mutate`    | **mutate** or create a *column*                   |
| `summarize` | calculate a numerical **summary** of a *column*   |
| `group_by`  | **group** the *rows* by a specified *column*      |


## Exercises Part 1: Same Verbs, New Tricks

### Exercise 1: More Filtering {.unnumbered}

Recall the "logical comparison operators" we can use to `filter()` our data:

| symbol             | meaning                   |
|:-------------------|:--------------------------|
| `==`               | equal to                  |
| `!=`               | not equal to              |
| `>`                | greater than              |
| `>=`               | greater than or equal to  |
| `<`                | less than                 |
| `<=`               | less than or equal to     |
| `%in% c(***, ***)` | a list of multiple values |

#### Part a {.unnumbered}

::: {.callout-tip title="Commenting/Uncommenting Code"}
To comment/uncomment several lines of code at once, highlight them then click <kbd>ctrl/cmd</kbd>+<kbd>shift</kbd>+<kbd>c</kbd>.
:::

```{r}
# Create a dataset with just Adelie and Chinstrap using %in%
# Pipe this into `count(species)` to confirm that you only have these 2 species
 penguins |> 
   filter(species %in% c("Adelie", "Chinstrap")) |> 
   count(species)
```

```{r}
# Create a dataset with just Adelie and Chinstrap using !=
# Pipe this into `count(species)` to confirm that you only have these 2 species
 penguins|> 
   filter(species != "Gentoo") |> 
   count(species)
```

#### Part b {.unnumbered}

Notice that some of our penguins have missing (`NA`) data on some values:

```{r}
head(penguins)
```

::: {.callout-tip title="Handeling `NA` Values"}
There are many ways to handle missing data. The right approach depends upon your research goals. A general rule is: Only get rid of observations with missing data if they're missing data on variables you *need* for the specific task at hand!
:::

**Example 1**

Suppose our research focus is *just* on `body_mass_g`. Two penguins are missing this info:

```{r}
# NOTE the use of is.na()
penguins |> 
  summarize(sum(is.na(body_mass_g)))
```

Let's define a new dataset that removes these penguins:

```{r}
# NOTE the use of is.na()
penguins_w_body_mass <- penguins |> 
  filter(!is.na(body_mass_g))

# Compare the number of penguins in this vs the original data
nrow(penguins_w_body_mass)
nrow(penguins)
```

Note that some penguins in `penguins_w_body_mass` are missing info on `sex`, but we don't care since that's not related to our research question:

```{r}
penguins_w_body_mass |> 
  summarize(sum(is.na(sex)))
```

**Example 2**

In the *very rare case* that we need complete information on every variable for the specific task at hand, we can use `na.omit()` to get rid of *any* penguin that's missing info on *any* variable:

```{r}
penguins_complete <- penguins |> 
  na.omit()
```

How many penguins did this eliminate?

```{r}
nrow(penguins_complete)
nrow(penguins)
```

#### Part c {.unnumbered}

Explain why we should only use `na.omit()` in extreme circumstances.

We may accidentally omit information or individuals we need or want to include.

\
\
\
\

### Exercise 2: More Selecting {.unnumbered}

Being able to `select()` only certain columns can help simplify our data. This is especially important when we're working with *lots* of columns (which we haven't done yet). It can also get tedious to type out every column of interest. Here are some shortcuts:

-   `-` *removes* a given variable and keeps all others (e.g. `select(-island)`)
-   `starts_with("___")`, `ends_with("___")`, or `contains("___")` selects only the columns that either start with, end with, or simply contain the given string of characters

Use these *shortcuts* to create the following datasets.

```{r}
# First: recall the variable names
names(penguins)
```

```{r}
# Use a shortcut to keep everything but the year and island variables
penguins |> 
  select(-island, -year)

```

```{r}
# Use a shortcut to keep only species and the penguin characteristics measured in mm
penguins |> 
  select(species, ends_with("mm"))

```

```{r}
# Use a shortcut to keep only species and bill-related measurements
penguins |> 
  select(species, contains("bill"))

```

```{r}
# Use a shortcut to keep only species and the length-related characteristics
penguins |> 
  select(species, contains("length"))

```

\
\
\
\

### Exercise 3: Arranging, Counting, & Grouping by Multiple Variables {.unnumbered}

We've done examples where we need to `filter()` by more than one variable, or `select()` more than one variable. Use your intuition for how we can `arrange()`, `count()`, and `group_by()` more than one variable.

```{r}
# Change this code to sort the penguins by species, and then island name
# NOTE: The first row should be an Adelie penguin living on Biscoe island
penguins |> 
  arrange(species, island)
```

```{r}
# Change this code to count the number of male/female penguins observed for each species
penguins |> 
  count(species, sex)
```

```{r}
# Change this code to calculate the average body mass by species and sex
penguins |> 
  group_by(species, sex) |> 
  summarize(mean = mean(body_mass_g, na.rm = TRUE))

```

\
\
\
\

### Exercise 4: Dates {.unnumbered}

Before some wrangling practice, let's explore another important concept: working with or mutating *date* variables. Dates are a whole special object type or class in R that automatically respect the order of time.

```{r}
# Get today's date
as.Date(today())

# Let's store this as "today" so we can work with it below
today <- as.Date(today())

# Check out the class of this object
class(today)
```

The `lubridate` package inside `tidyverse` contains functions that can extract various information from dates. Let's learn about some of the most common functions by applying them to `today`. For each, make a comment on what the function does

```{r}
year(today)
```

```{r}
# What do these lines produce / what's their difference?
month(today)
month(today, label = TRUE)
```

```{r}
# What does this number mean?
week(today)
```

```{r}
# What do these lines produce / what's their difference?
mday(today)
yday(today)  # This is often called the "Julian day"
```

```{r}
# What do these lines produce / what's their difference?
wday(today)
wday(today, label = TRUE)
```

```{r}
# What do the results of these 2 lines tell us?
today >= ymd("2024-02-14")
today < ymd("2024-02-14")
```

\
\
\
\
